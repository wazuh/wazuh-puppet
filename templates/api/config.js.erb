
var config = {};

// Basic configuration
<% @api_config_params.each do |name,value| -%>
config.<%= name %> = "<%= value %>";
<% end -%>

// HTTPS Certificates
<% if @api_enable_https -%>
<% @api_config_certs.each do |name,value| -%>
config.<%= name %> = "<%= value %>";
<% else -%>
<% @api_config_certs.each do |name,value| -%>
//config.<%= name %> = "<%= value %>";
<% end -%>

// Advanced configuration

// Values for API log: disabled, info, warning, error, debug (each level includes the previous level).
config.logs = "info";
config.logs = "<% @api_config_advanced_params['log_level'] %>";
// Cross-origin resource sharing. Values: yes, no.
config.cors = "yes";
config.cors = "<% @api_config_advanced_params['cors'] %>";
// Cache (time in milliseconds)
config.cache_enabled = "yes";
config.cache_enabled = "<% @api_config_advanced_params['cache_enabled'] %>";
config.cache_debug = "no";
config.cache_debug = "<% @api_config_advanced_params['cache_debug'] %>";
config.cache_time = "750";
config.cache_time = "<% @api_config_advanced_params['cache_time'] %>";
// Log path
config.log_path = config.ossec_path + "/logs/api.log";
config.log_path = config.ossec_path + "<% @api_config_advanced_params['log_path'] %>";
// Python
config.python = [
    // Default installation
    {
        bin: "python",
        lib: ""
    },
    // Python 3
    {
        bin: "python3",
        lib: ""
    },
    // Package 'python27' for CentOS 6
    {
        bin: "/opt/rh/python27/root/usr/bin/python",
        lib: "/opt/rh/python27/root/usr/lib64"
    }
];
// Shared library path
config.ld_library_path = config.ossec_path + "/api/framework/lib"
config.ld_library_path = config.ossec_path + "<% @api_config_advanced_params['ld_library_path'] %>"

// Option to force the use of authd to remove and add agents
config.use_only_authd = <% @api_config_advanced_params['use_only_authd'] %>;

/************************* SSL OPTIONS ****************************************/
// SSL protocol

// SSL protocol to use. All available secure protocols available at:
// https://www.openssl.org/docs/man1.0.2/ssl/ssl.html#DEALING-WITH-PROTOCOL-METHODS
config.secureProtocol = "TLSv1_2_method";
config.secureProtocol = "<% @api_config_advanced_params['secureProtocol'] %>";
try {
    // Disable the use of SSLv3, TLSv1.1 and TLSv1.0. All available secureOptions at:
    // https://nodejs.org/api/crypto.html#crypto_openssl_options
    const crypto = require('crypto');
    config.secureOptions = crypto.constants.SSL_OP_NO_SSLv3 |
                           crypto.constants.SSL_OP_NO_TLSv1 |
                           crypto.constants.SSL_OP_NO_TLSv1_1;
} catch (err) {
    console.log("Could not configure NodeJS to avoid unsecure SSL/TLS protocols: " + err)
}

// SSL ciphersuit

// When choosing a cipher, use the server's preferences instead of the client
// preferences. When not set, the SSL server will always follow the clients
// preferences. More info at:
// https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html
config.honorCipherOrder = <% @api_config_advanced_params['honorCipherOrder'] %>;
// Modify default ciphersuit. More info:
// https://nodejs.org/api/tls.html#tls_modifying_the_default_tls_cipher_suite
config.ciphers =  "<% @api_config_advanced_params['ciphers'] %>";

module.exports = config;
